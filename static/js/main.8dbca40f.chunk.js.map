{"version":3,"sources":["styles/GlobalStyle.ts","apis/TodoApi.ts","hooks/useInput.ts","components/TodoNewInput.tsx","components/TodoHeader.tsx","components/TodoItem.tsx","components/TodoList.tsx","pages/TodoPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","normalize","sleep","ms","Promise","f","setTimeout","TodoApi","fetchTodoList","onSuccess","a","items","id","title","done","pinned","counter","useInput","defaultValue","useState","value","setValue","e","target","TodoNewInputWrapper","styled","div","TitleInput","input","IconWrapper","span","TodoNewInput","props","addNewTodo","onChangeTitle","setTitle","placeholder","onChange","onClick","TodoHeaderWrapper","TodoHeader","TodoItemWrapper","Content","css","TodoItem","todo","changeTodo","deleteTodo","TodoListWrapper","Title","TodoList","todos","sortedItems","setSortedItems","useEffect","sort","b","map","TodoPage","todoApi","todoList","setTodoList","newTodo","filter","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAiBeA,EAdKC,4BAAH,8IACbC,a,wECFEC,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAGF,OAyC3BI,E,sCArCbC,c,uCAAgB,WAAOC,GAAP,SAAAC,EAAA,sEACRR,EAAM,KADE,OAiCdO,EA9B6B,CAC3BE,MAAO,CACL,CACEC,GAAI,EACJC,MAAO,gEACPC,MAAM,EACNC,QAAQ,GAEV,CACEH,GAAI,EACJC,MAAO,kCACPC,MAAM,EACNC,QAAQ,GAEV,CACEH,GAAI,EACJC,MAAO,qDACPC,MAAM,EACNC,QAAQ,GAEV,CACEH,GAAI,EACJC,MAAO,yCACPC,MAAM,EACNC,QAAQ,IAGZC,QAAS,IA9BG,2C,uDCQHC,EAbE,SAACC,GAChB,MAA0BC,mBAASD,GAAgB,IAAnD,mBAAOE,EAAP,KAAcC,EAAd,KAKA,MAAO,CAACD,EAJc,SAACE,GACrBD,EAASC,EAAEC,OAAOH,QAGUC,I,eCJ1BG,EAAsBC,UAAOC,IAAV,uDAInBC,EAAaF,UAAOG,MAAV,uEAKVC,EAAcJ,UAAOK,KAAV,+EAkCFC,EAvBmC,SAACC,GACjD,IAAQC,EAAeD,EAAfC,WACR,EAAyChB,IAAzC,mBAAOJ,EAAP,KAAcqB,EAAd,KAA6BC,EAA7B,KAOA,OACE,eAACX,EAAD,WACE,cAACG,EAAD,CACES,YAAY,4DACZhB,MAAOP,EACPwB,SAAUH,IAEZ,cAACL,EAAD,CAAaS,QAZD,WACdL,EAAWpB,GACXsB,EAAS,KAUP,SACE,cAAC,IAAD,UCtCFI,EAAoBd,UAAOC,IAAV,sDAkBRc,EAV+B,SAACR,GAC7C,IAAQC,EAAeD,EAAfC,WAER,OACE,cAACM,EAAD,UACE,cAAC,EAAD,CAAcN,WAAYA,O,gBCV1BQ,EAAkBhB,UAAOC,IAAV,yDAIfG,EAAcJ,UAAOK,KAAV,+EAWXY,EAAUjB,UAAOK,KAAV,yDAGT,SAACE,GAAD,OACAA,EAAMlB,MACN6B,cADA,yEA4CWC,EAhC2B,SAACZ,GACzC,IAAQa,EAAiCb,EAAjCa,KAAMC,EAA2Bd,EAA3Bc,WAAYC,EAAef,EAAfe,WAClBlC,EAAwBgC,EAAxBhC,MAAOC,EAAiB+B,EAAjB/B,KAAMC,EAAW8B,EAAX9B,OAcrB,OACE,eAAC0B,EAAD,WACE,cAAC,EAAD,CAAaH,QAVI,WACnBQ,EAAWD,EAAKjC,GAAI,CAAEG,QAAS8B,EAAK9B,UASlC,SACGA,EAAS,cAAC,IAAD,IAAoB,cAAC,IAAD,MAEhC,cAAC,EAAD,CAAauB,QAjBE,WACjBQ,EAAWD,EAAKjC,GAAI,CAAEE,MAAO+B,EAAK/B,QAgBhC,SACGA,EAAO,cAAC,IAAD,IAAuB,cAAC,IAAD,MAEjC,cAAC4B,EAAD,CAAS5B,KAAMA,EAAf,SAAsBD,IACtB,cAAC,EAAD,CAAayB,QAbE,WACjBS,EAAWF,EAAKjC,KAYd,SACE,cAAC,IAAD,UCzDFoC,EAAkBvB,UAAOC,IAAV,wDAIfuB,EAAQxB,UAAOC,IAAV,sEAyCIwB,EA9B2B,SAAClB,GACzC,IAAQmB,EAAkCnB,EAAlCmB,MAAOL,EAA2Bd,EAA3Bc,WAAYC,EAAef,EAAfe,WAC3B,EAAsC5B,mBAA0B,IAAhE,mBAAOiC,EAAP,KAAoBC,EAApB,KAaA,OAXAC,qBAAU,WACRD,EACEF,EAAMxC,MAAM4C,MAAK,SAAC7C,EAAG8C,GAEnB,OAAI9C,EAAEK,SAAWyC,EAAEzC,QAAgB,GAC9BL,EAAEK,QAAUyC,EAAEzC,OAAe,EAC3ByC,EAAE5C,GAAKF,EAAEE,SAGnB,CAACuC,IAGF,eAACH,EAAD,WACE,cAACC,EAAD,uBACCG,EAAYK,KAAI,SAACZ,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,WAAYA,EACZC,WAAYA,GAHPF,EAAKjC,WC8BL8C,EAhEY,WACzB,IAAMC,EAAU,IAAIpD,EACpB,EAAgCY,qBAAhC,mBAAOyC,EAAP,KAAiBC,EAAjB,KAEAP,qBAAU,WACRK,EAAQnD,eAAc,SAAC2C,GACrBU,EAAYV,QAEb,IAwCH,OAAKS,EAKH,qCACE,cAAC,EAAD,CAAY3B,WA5CG,SAACpB,GAClB,GAAK+C,GACA/C,EAAL,CAEA,IAAMiD,EAAU,CACdjD,QACAD,GAAIgD,EAAS5C,QACbF,MAAM,EACNC,QAAQ,GAGV8C,EAAY,CACVlD,MAAM,GAAD,mBAAMiD,EAASjD,OAAf,CAAsBmD,IAC3B9C,QAAS4C,EAAS5C,QAAU,QAgC5B,cAAC,EAAD,CACEmC,MAAOS,EACPd,WArBa,SAAClC,EAAYkD,GACzBF,GAELC,EAAY,CACVlD,MAAOiD,EAASjD,MAAM8C,KAAI,SAACZ,GAAD,mBAAC,eACtBA,GACCA,EAAKjC,KAAOA,GAAMkD,MAExB9C,QAAS4C,EAAS5C,WAchB+B,WA/Ba,SAACnC,GACbgD,GAELC,EAAY,CACVlD,MAAOiD,EAASjD,MAAMoD,QAAO,SAAClB,GAAD,OAAUA,EAAKjC,KAAOA,KACnDI,QAAS4C,EAAS5C,gBAiBb,MC1CIgD,EAVO,WACpB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWR,SCMpBS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8dbca40f.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport { normalize } from 'styled-normalize';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n\r\n  html,\r\n  body {\r\n    overflow: hidden;\r\n    margin: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import TodoListModel from 'models/TodoListModel';\r\n\r\nconst sleep = (ms: number) => {\r\n  return new Promise((f) => setTimeout(f, ms));\r\n};\r\n\r\nclass TodoApi {\r\n  fetchTodoList = async (onSuccess: (data: TodoListModel) => void) => {\r\n    await sleep(3000);\r\n\r\n    const todos: TodoListModel = {\r\n      items: [\r\n        {\r\n          id: 0,\r\n          title: '투두리스트 마무리하기',\r\n          done: false,\r\n          pinned: false,\r\n        },\r\n        {\r\n          id: 1,\r\n          title: '알프스 과제',\r\n          done: false,\r\n          pinned: true,\r\n        },\r\n        {\r\n          id: 2,\r\n          title: '콜로키움 과제 제출',\r\n          done: true,\r\n          pinned: true,\r\n        },\r\n        {\r\n          id: 3,\r\n          title: '밀린 강의 듣기',\r\n          done: false,\r\n          pinned: false,\r\n        },\r\n      ],\r\n      counter: 4,\r\n    };\r\n\r\n    onSuccess(todos);\r\n  };\r\n}\r\n\r\nexport default TodoApi;\r\n","import { useState } from 'react';\r\n\r\nconst useInput = (defaultValue?: string) => {\r\n  const [value, setValue] = useState(defaultValue || '');\r\n  const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return [value, onChangeValue, setValue] as [\r\n    string,\r\n    (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    React.Dispatch<React.SetStateAction<string>>,\r\n  ];\r\n};\r\n\r\nexport default useInput;\r\n","import useInput from 'hooks/useInput';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoNewInputWrapper = styled.div`\r\n  border: 1px solid blue;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  width: 300px;\r\n  display: inline-block;\r\n`;\r\n\r\nconst IconWrapper = styled.span`\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\ninterface TodoNewInputProps {\r\n  addNewTodo: (title: string) => void;\r\n}\r\n\r\nconst TodoNewInput: React.FC<TodoNewInputProps> = (props) => {\r\n  const { addNewTodo } = props;\r\n  const [title, onChangeTitle, setTitle] = useInput();\r\n\r\n  const addTodo = () => {\r\n    addNewTodo(title);\r\n    setTitle('');\r\n  };\r\n\r\n  return (\r\n    <TodoNewInputWrapper>\r\n      <TitleInput\r\n        placeholder=\"할 일을 입력해 주세요\"\r\n        value={title}\r\n        onChange={onChangeTitle}\r\n      />\r\n      <IconWrapper onClick={addTodo}>\r\n        <FaPlus />\r\n      </IconWrapper>\r\n    </TodoNewInputWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoNewInput;\r\n","import styled from 'styled-components';\r\nimport TodoNewInput from './TodoNewInput';\r\n\r\nconst TodoHeaderWrapper = styled.div`\r\n  border: 2px solid red;\r\n`;\r\n\r\ninterface TodoHeaderProps {\r\n  addNewTodo: (title: string) => void;\r\n}\r\n\r\nconst TodoHeader: React.FC<TodoHeaderProps> = (props) => {\r\n  const { addNewTodo } = props;\r\n\r\n  return (\r\n    <TodoHeaderWrapper>\r\n      <TodoNewInput addNewTodo={addNewTodo} />\r\n    </TodoHeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoHeader;\r\n","import styled, { css } from 'styled-components';\r\nimport TodoItemModel, { ChangeTodoItemProps } from 'models/TodoItemModel';\r\nimport { AiFillPushpin, AiOutlinePushpin } from 'react-icons/ai';\r\nimport { ImBin } from 'react-icons/im';\r\nimport { FaRegCheckSquare, FaRegSquare } from 'react-icons/fa';\r\n\r\nconst TodoItemWrapper = styled.div`\r\n  border: 1px solid orange;\r\n`;\r\n\r\nconst IconWrapper = styled.span`\r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\ninterface ContentProps {\r\n  done?: boolean;\r\n}\r\n\r\nconst Content = styled.span<ContentProps>`\r\n  font-size: 15px;\r\n\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\ninterface TodoItemProps {\r\n  todo: TodoItemModel;\r\n  changeTodo: (id: number, newTodo: ChangeTodoItemProps) => void;\r\n  deleteTodo: (id: number) => void;\r\n}\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = (props) => {\r\n  const { todo, changeTodo, deleteTodo } = props;\r\n  const { title, done, pinned } = todo;\r\n\r\n  const toggleDone = () => {\r\n    changeTodo(todo.id, { done: !todo.done });\r\n  };\r\n\r\n  const togglePinned = () => {\r\n    changeTodo(todo.id, { pinned: !todo.pinned });\r\n  };\r\n\r\n  const deleteThis = () => {\r\n    deleteTodo(todo.id);\r\n  };\r\n\r\n  return (\r\n    <TodoItemWrapper>\r\n      <IconWrapper onClick={togglePinned}>\r\n        {pinned ? <AiFillPushpin /> : <AiOutlinePushpin />}\r\n      </IconWrapper>\r\n      <IconWrapper onClick={toggleDone}>\r\n        {done ? <FaRegCheckSquare /> : <FaRegSquare />}\r\n      </IconWrapper>\r\n      <Content done={done}>{title}</Content>\r\n      <IconWrapper onClick={deleteThis}>\r\n        <ImBin />\r\n      </IconWrapper>\r\n    </TodoItemWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItemModel, { ChangeTodoItemProps } from 'models/TodoItemModel';\r\nimport TodoListModel from 'models/TodoListModel';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoListWrapper = styled.div`\r\n  border: 2px solid green;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n`;\r\n\r\ninterface TodoListProps {\r\n  todos: TodoListModel;\r\n  changeTodo: (id: number, newTodo: ChangeTodoItemProps) => void;\r\n  deleteTodo: (id: number) => void;\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = (props) => {\r\n  const { todos, changeTodo, deleteTodo } = props;\r\n  const [sortedItems, setSortedItems] = useState<TodoItemModel[]>([]);\r\n\r\n  useEffect(() => {\r\n    setSortedItems(\r\n      todos.items.sort((a, b) => {\r\n        // first: pinned, second: bigger id\r\n        if (a.pinned && !b.pinned) return -1;\r\n        if (!a.pinned && b.pinned) return 1;\r\n        return b.id - a.id;\r\n      }),\r\n    );\r\n  }, [todos]);\r\n\r\n  return (\r\n    <TodoListWrapper>\r\n      <Title>TodoList</Title>\r\n      {sortedItems.map((todo) => (\r\n        <TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          changeTodo={changeTodo}\r\n          deleteTodo={deleteTodo}\r\n        />\r\n      ))}\r\n    </TodoListWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { useEffect, useState } from 'react';\r\nimport TodoApi from 'apis/TodoApi';\r\nimport TodoHeader from 'components/TodoHeader';\r\nimport TodoList from 'components/TodoList';\r\nimport TodoListModel from 'models/TodoListModel';\r\nimport { ChangeTodoItemProps } from 'models/TodoItemModel';\r\n\r\nconst TodoPage: React.FC = () => {\r\n  const todoApi = new TodoApi();\r\n  const [todoList, setTodoList] = useState<TodoListModel>();\r\n\r\n  useEffect(() => {\r\n    todoApi.fetchTodoList((todos) => {\r\n      setTodoList(todos);\r\n    });\r\n  }, []);\r\n\r\n  const addNewTodo = (title: string) => {\r\n    if (!todoList) return;\r\n    if (!title) return;\r\n\r\n    const newTodo = {\r\n      title,\r\n      id: todoList.counter,\r\n      done: false,\r\n      pinned: false,\r\n    };\r\n\r\n    setTodoList({\r\n      items: [...todoList.items, newTodo],\r\n      counter: todoList.counter + 1,\r\n    });\r\n  };\r\n\r\n  const deleteTodo = (id: number) => {\r\n    if (!todoList) return;\r\n\r\n    setTodoList({\r\n      items: todoList.items.filter((todo) => todo.id !== id),\r\n      counter: todoList.counter,\r\n    });\r\n  };\r\n\r\n  const changeTodo = (id: number, newTodo: ChangeTodoItemProps) => {\r\n    if (!todoList) return;\r\n\r\n    setTodoList({\r\n      items: todoList.items.map((todo) => ({\r\n        ...todo,\r\n        ...(todo.id === id && newTodo),\r\n      })),\r\n      counter: todoList.counter,\r\n    });\r\n  };\r\n\r\n  if (!todoList) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TodoHeader addNewTodo={addNewTodo} />\r\n      <TodoList\r\n        todos={todoList}\r\n        changeTodo={changeTodo}\r\n        deleteTodo={deleteTodo}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoPage;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport TodoPage from 'pages/TodoPage';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" component={TodoPage} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GlobalStyle from 'styles/GlobalStyle';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}