{"version":3,"sources":["styles/GlobalStyle.ts","apis/TodoApi.ts","components/TodoNewInput.tsx","components/TodoHeader.tsx","components/TodoItem.tsx","components/TodoList.tsx","pages/TodoPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","normalize","sleep","ms","Promise","f","setTimeout","TodoApi","fetchTodoList","onSuccess","a","TodoNewInputWrapper","styled","div","Content","TodoNewInput","TodoHeaderWrapper","Title","TodoHeader","TodoItemWrapper","TodoItem","props","item","data","TodoListWrapper","TodoList","todolist","map","todoitem","TodoPage","todoApi","useState","todoList","setTodoList","useEffect","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAiBeA,EAdKC,4BAAH,8IACbC,a,wDCJEC,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAGF,OAY3BI,E,sCARbC,c,uCAAgB,WAAOC,GAAP,SAAAC,EAAA,sEACRR,EAAM,KADE,OAIdO,EADyB,CAAC,EAAG,EAAG,IAHlB,2C,8DCHZE,EAAsBC,UAAOC,IAAV,uDAInBC,EAAUF,UAAOC,IAAV,gDAYEE,EARgB,WAC7B,OACE,cAACJ,EAAD,UACE,cAACG,EAAD,8BCVAE,EAAoBJ,UAAOC,IAAV,sDAIjBI,EAAQL,UAAOC,IAAV,sEAcIK,EATc,WAC3B,OACE,eAACF,EAAD,WACE,cAACC,EAAD,yBACA,cAAC,EAAD,QCdAE,EAAkBP,UAAOC,IAAV,yDAIfC,EAAUF,UAAOC,IAAV,gDAkBEO,EAV2B,SAACC,GACzC,IAAcC,EAASD,EAAfE,KAER,OACE,cAACJ,EAAD,UACE,cAAC,EAAD,UAAUG,OChBVE,EAAkBZ,UAAOC,IAAV,wDAIfI,EAAQL,UAAOC,IAAV,sEAsBIY,EAb2B,SAACJ,GACzC,IAAcK,EAAaL,EAAnBE,KAER,OACE,eAACC,EAAD,WACE,cAAC,EAAD,uBACCE,EAASC,KAAI,SAACC,GAAD,OACZ,cAAC,EAAD,CAAyBL,KAAMK,GAAhBA,UCARC,EAlBY,WACzB,IAAMC,EAAU,IAAIvB,EACpB,EAAgCwB,mBAAmB,IAAnD,mBAAOC,EAAP,KAAiBC,EAAjB,KAQA,OANAC,qBAAU,WACRJ,EAAQtB,eAAc,SAACe,GACrBU,EAAYV,QAEb,IAGD,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUA,KAAMS,QCJPG,EAVO,WACpB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWR,SCMpBS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7802cd2b.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport { normalize } from 'styled-normalize';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${normalize}\r\n\r\n  html,\r\n  body {\r\n    overflow: hidden;\r\n    margin: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","const sleep = (ms: number) => {\r\n  return new Promise((f) => setTimeout(f, ms));\r\n};\r\n\r\nclass TodoApi {\r\n  fetchTodoList = async (onSuccess: (data: number[]) => void) => {\r\n    await sleep(3000);\r\n\r\n    const result: number[] = [1, 2, 3];\r\n    onSuccess(result);\r\n  };\r\n}\r\n\r\nexport default TodoApi;\r\n","import styled from 'styled-components';\r\n\r\nconst TodoNewInputWrapper = styled.div`\r\n  border: 1px solid blue;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  font-size: 15px;\r\n`;\r\n\r\nconst TodoNewInput: React.FC = () => {\r\n  return (\r\n    <TodoNewInputWrapper>\r\n      <Content>TodoNewInput</Content>\r\n    </TodoNewInputWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoNewInput;\r\n","import styled from 'styled-components';\r\nimport TodoNewInput from './TodoNewInput';\r\n\r\nconst TodoHeaderWrapper = styled.div`\r\n  border: 2px solid red;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst TodoHeader: React.FC = () => {\r\n  return (\r\n    <TodoHeaderWrapper>\r\n      <Title>TodoHeader</Title>\r\n      <TodoNewInput />\r\n    </TodoHeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoHeader;\r\n","import styled from 'styled-components';\r\n\r\nconst TodoItemWrapper = styled.div`\r\n  border: 1px solid orange;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  font-size: 15px;\r\n`;\r\n\r\ninterface TodoItemProps {\r\n  data: number;\r\n}\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = (props) => {\r\n  const { data: item } = props;\r\n\r\n  return (\r\n    <TodoItemWrapper>\r\n      <Content>{item}</Content>\r\n    </TodoItemWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoListWrapper = styled.div`\r\n  border: 2px solid green;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n`;\r\n\r\ninterface TodoListProps {\r\n  data: number[];\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = (props) => {\r\n  const { data: todolist } = props;\r\n\r\n  return (\r\n    <TodoListWrapper>\r\n      <Title>TodoList</Title>\r\n      {todolist.map((todoitem) => (\r\n        <TodoItem key={todoitem} data={todoitem} />\r\n      ))}\r\n    </TodoListWrapper>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import { useEffect, useState } from 'react';\r\nimport TodoApi from 'apis/TodoApi';\r\nimport TodoHeader from 'components/TodoHeader';\r\nimport TodoList from 'components/TodoList';\r\n\r\nconst TodoPage: React.FC = () => {\r\n  const todoApi = new TodoApi();\r\n  const [todoList, setTodoList] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    todoApi.fetchTodoList((data) => {\r\n      setTodoList(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <TodoHeader />\r\n      <TodoList data={todoList} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoPage;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport TodoPage from 'pages/TodoPage';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" component={TodoPage} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GlobalStyle from 'styles/GlobalStyle';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}